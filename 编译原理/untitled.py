# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import sys

sys.path.append('D:\\代码\\编译原理')
sys.path.append('D:\\代码')
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from 词法分析.bshifu import distinguish, keyword_sign, jie_sign, cal_sign, word_sign
from PyQt5.QtCore import Qt
from 词法分析.auto_analyse import get_lex
import os

global changed
from PyQt5 import QtCore, QtGui, QtWidgets
from 语法分析 import digui
from 语法分析 import LR_analyse
from 语法分析 import predict_analyse
from FA import NFA_DFA
from 语义分析与中间代码生成 import statement_mean_analyse
from 目标代码生成 import ObjectCode
class Ui_MainWindow(QtWidgets.QMainWindow):

    def open_file(self):
        path, _ = QFileDialog.getOpenFileName(self, '打开文件', self.cwd, "All Files (*);;Text Files (*.txt)")
        try:
            if path:
                with open(path, 'r', encoding='utf-8') as f:
                    text = f.read()
                    self.textEdit.setText(text)
                    self.textEdit_2.setText('开始打开文件')
                    self.textEdit_3.setText('2')
                self.init_label()
        except:
            self.textEdit_2.setText('请保证打开的文件是UTF-8形式')
        self.openfile = path

    def save_another_file(self):

        text = self.textEdit.toPlainText()
        try:
            with open(self.cwd + '/test_save.txt', 'w') as f:
                f.write(text)

        except:
            print(self.cwd + 'test_save.txt')
            print('路径有问题')
        self.textEdit_2.setText('写入 ./test_save.txt 成功')

    def save_(self):

        text = self.textEdit.toPlainText()
        try:
            with open(self.openfile, 'w') as f:
                f.write(text)

        except:
            print(self.cwd)
            print('路径有问题')
        self.textEdit_2.setText('写入成功')

    def ci_analyse(self):
        text = self.textEdit.toPlainText()
        zs, error = distinguish(text)
        t = '词                种别码          行号 \n'
        for z in zs:
            t = t + z[0] + ''.join([' '] * (20 - len(str(z[0])))) + str(z[1]) + ''.join(
                [' '] * 10) + str(z[2]) + '\n'
        e = '错误词              错误信息                   行号\n'
        for z in error:
            e = e + z[0] + ''.join([' '] * (20 - len(str(z[0])))) + str(z[1]) + ''.join(
                [' '] * (25 - len(str(z[1])))) + str(z[-1]) + '\n'
        self.textEdit_2.setText(t)
        self.textEdit_3.setText(e)

    def auto_analy(self):
        text = self.textEdit.toPlainText()
        zs, error = get_lex(text)
        t = '词                种别码          行号 \n'
        for z in zs:
            t = t + z[0] + ''.join([' '] * (20 - len(str(z[0])))) + str(z[1]) + ''.join(
                [' '] * 10) + str(z[2]) + '\n'
        e = '错误词              错误信息                   行号\n'
        for z in error:
            e = e + z[0] + ''.join([' '] * (20 - len(str(z[0])))) + str(z[1]) + ''.join(
                [' '] * (25 - len(str(z[1])))) + str(z[2]) + '\n'
        self.textEdit_2.setText(t)
        self.textEdit_3.setText(e)

    def change_color(self, k, color, w):
        self.textEdit.blockSignals(True)
        document = self.textEdit.document()
        highlight_cursor = QTextCursor(document)
        cursor = QTextCursor(document)
        cursor.beginEditBlock()

        color_format = QTextCharFormat(highlight_cursor.charFormat())
        color_format.setForeground(color)
        color_format.setFontWeight(w)
        while (not highlight_cursor.isNull()) and (not highlight_cursor.atBlockEnd()):
            highlight_cursor = document.find(k, highlight_cursor)
            if not highlight_cursor.isNull():
                highlight_cursor.mergeCharFormat(color_format)

        cursor.endEditBlock()
        self.textEdit.blockSignals(False)

    def init_label(self):
        if self.changed:
            v = self.textEdit.verticalScrollBar().value()
            if v <= 0:
                s = '\n'
                for i in range(1, 27):
                    s = s + str(i) + '  ' + '\n' + '\n'
                self.label.setText(s)
            key = list(keyword_sign.keys()) + list(word_sign.keys())

            for (k, n) in zip(key, range(len(keyword_sign.keys()))):
                self.changed = False
                color = QColor(166, 36, 177)
                self.change_color(k, color, 100)
            for k in list(jie_sign.keys()):
                self.changed = False
                color = QColor(90, 169, 112)
                self.change_color(k, color, 100)

            for k in list(cal_sign.keys()):
                self.changed = False
                color = QColor(125, 145, 242)
                self.change_color(k, color, 100)

            self.changed = False


        else:
            self.changed = True

    def init_label2(self):
        v = self.textEdit.verticalScrollBar().value()
        s = '\n'
        if v >= 0:
            v = int(v / 30) + 1
        if v == 0:
            v += 1
        for i in range(v, v + 25):
            s = s + str(i) + '  ' + '\n' + '\n'
        self.label.setText(s)

    def dig_ana(self):
        self.textEdit_2.setText('''递归分析目前只能支持数字 加 减 乘 除 取余 括号运算，文法如下
        E-> E + T | T, 
        E-> E - T | T, 
        T-> T * F | F, 
        T-> T / F | F, 
        T-> T = E, 
        F-> i | ( E ),
        i-> 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
        在左框中可输入测试用例 ( 1 + 3 ) * 4
        请保证用空格分隔，否则会报错！！！ 

             ''')
        text = self.textEdit.toPlainText()
        if len(text) <= 1:
            text = '( 1 + 3 ) * 4'
            self.textEdit.setText(text)
        digui.Digui_ana(text)

    def pre_ana(self):
        self.textEdit_2.setText('''预测分析目前支持C语言常见的文法
        请不要输入#include<stdio.h> 这在文法中没有定义，请直接输入 类似
                    int main ( ) { 
                    int i = 10 ;
                    int m = 2 ;
                    m = m + i ;
                            }
        在左框中可输入测试用例 
        请保证每个变量与符号用空格分隔，否则有可能会报错！！！ 
        若未输入将使用默认代码
        预测分析表保存在了语法分析/static/预测分析表
        预测分析过程保存在了语法分析/static/预测分析过程
             ''')
        text = self.textEdit.toPlainText()
        if len(text) <= 1:
            text = ''' 
int main ( ) { 
        int i = 10 ;
        int m = 2 ;
        m = m + i ;
}
         '''
            self.textEdit.setText(text)
        predict_analyse.get_tree(text, True)

    def Lr0_ana(self):
        self.textEdit_2.setText('''
        Lr0分析目前只能支持部分文法的使用，文法要求不能含有左递归也不能含有右递归!!!!
        例如  L->L a  L-> a L 都是不支持的，
        默认文法如下
        S-> a A
        S-> b B
        A-> c d
        A-> e
        B-> f g
        B-> h
        在左框中可输入测试用例 a c d
        请保证用空格分隔，否则会报错！！！ 
        分析过程存放在 语法分析/static/lr分析过程.csv

             ''')
        text = self.textEdit.toPlainText()
        if len(text) <= 1:
            text = 'a c d'
            self.textEdit.setText(text)
        gc = LR_analyse.Lr0([], text)
        s = '状态栈   符号栈   待输入符号   当前状态   当前字符   执行\n'
        for g in gc:
            for r in g:
                s += str(r) + ' '
            s += '\n'
        self.textEdit_3.setText(s)

    def trans_DFA(self):
        self.textEdit_2.setText('''
在左框中可输入测试用例 (a|b)*abb(a|b)* 
生成的NFA、DFA、minDFA在 pic/pic/NFA.pdf DFA.pdf  minDFA.pdf
观察之后请关闭，否则会影响到后续运行 
                     ''')
        text = self.textEdit.toPlainText()
        if len(text) <= 1:
            text = '(a|b)*abb(a|b)*'
            self.textEdit.setText(text)
        NFA_DFA.start_NFA(text)

    def middle_code(self):
        code = self.textEdit.toPlainText()
        if len(code) <= 1:
            code='''
    int main ( ) {
        int a = 1 ;
        int b = 2 ;
        int c = 1 ;
        int d = 2 ;
        int p = d * 3 ;
        int i ;
                for( i = 0 ; i < c + d  ; i = i + 1 )  {
                p = p + 1 ;
                a = a * 2 ;
                                                      }
        }
            '''
            self.textEdit.setText(code)

        mid,symbol=statement_mean_analyse.Creat_SignTable(code)
        s1=''
        for m in mid:
            print(m)
            s1+=str(m)+'\n'
        s1 +=' 语义的符号表存储在D:/代码/编译原理/语义分析与中间代码生成/static/语义分析符号的表.csv \n 请在最下方的黄色框里输入想要查看值的变量名，再点击目标代码生成！！！'
        self.textEdit_2.setText(s1)
        self.mid=mid
        self.symbol = symbol

    def targetcode(self):
        var=self.textEdit_3.toPlainText()
        target=ObjectCode.Objecet_Code(self.mid,self.symbol,var)
        self.textEdit_2.setText(target.transfor())


    def __init__(self):
        super().__init__()
        self.cwd = os.getcwd()  # 获取当前程序文件位置
        self.openfile = ''
        self.changed = True
        self.setMouseTracking(True)
        self.first = True
        self.cow = 25
        # self.setAttribute(Qt.WA_StyledBackground, True)



    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1411, 1022)
        MainWindow.setMaximumSize(QtCore.QSize(1411, 1422))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(219, 237, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(219, 237, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(219, 237, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(219, 237, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(219, 237, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(219, 237, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(120, 120, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(219, 237, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(219, 237, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(219, 237, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        MainWindow.setPalette(palette)
        MainWindow.setStyleSheet("background-color: rgb(219, 237, 255);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(9, 9, 24, 951))
        self.label.setStyleSheet("background-color: rgb(116, 214, 255);")
        self.label.setObjectName("label")
        self.line_3 = QtWidgets.QFrame(self.centralwidget)
        self.line_3.setGeometry(QtCore.QRect(557, 434, 16, 16))
        self.line_3.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_3.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_3.setObjectName("line_3")
        self.line = QtWidgets.QFrame(self.centralwidget)
        self.line.setGeometry(QtCore.QRect(692, 10, 16, 853))
        self.line.setFrameShape(QtWidgets.QFrame.VLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.line_2 = QtWidgets.QFrame(self.centralwidget)
        self.line_2.setGeometry(QtCore.QRect(701, 10, 16, 853))
        self.line_2.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")
        self.line_5 = QtWidgets.QFrame(self.centralwidget)
        self.line_5.setGeometry(QtCore.QRect(710, 10, 16, 951))
        self.line_5.setStyleSheet(
            "background-color: qconicalgradient(cx:0, cy:0, angle:135, stop:0 rgba(255, 255, 0, 69), stop:0.375 rgba(255, 255, 0, 69), stop:0.423533 rgba(251, 255, 0, 145), stop:0.45 rgba(247, 255, 0, 208), stop:0.477581 rgba(255, 244, 71, 130), stop:0.518717 rgba(255, 218, 71, 130), stop:0.55 rgba(255, 255, 0, 255), stop:0.57754 rgba(255, 203, 0, 130), stop:0.625 rgba(255, 255, 0, 69), stop:1 rgba(255, 255, 0, 69));")
        self.line_5.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_5.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_5.setObjectName("line_5")
        self.textEdit = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit.setGeometry(QtCore.QRect(40, 10, 671, 951))
        self.textEdit.setMaximumSize(QtCore.QSize(731, 951))
        self.textEdit.setStyleSheet("background-color: rgb(198, 238, 206);\n"
                                    "selection-background-color: rgb(198, 238, 206);")
        self.textEdit.setObjectName("textEdit")
        self.textEdit_2 = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit_2.setGeometry(QtCore.QRect(731, 10, 641, 341))
        self.textEdit_2.setMaximumSize(QtCore.QSize(1081, 1341))
        self.textEdit_2.setStyleSheet("background-color: rgb(255, 247, 213);")
        self.textEdit_2.setObjectName("textEdit_2")
        self.textEdit_3 = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit_3.setGeometry(QtCore.QRect(731, 358, 641, 601))
        self.textEdit_3.setMaximumSize(QtCore.QSize(1481, 1501))
        self.textEdit_3.setStyleSheet("background-color: rgb(255, 247, 213);")
        self.textEdit_3.setObjectName("textEdit_3")
        self.line_3.raise_()
        self.line.raise_()
        self.line_2.raise_()
        self.line_5.raise_()
        self.textEdit_2.raise_()
        self.textEdit_3.raise_()
        self.label.raise_()
        self.textEdit.raise_()
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1411, 26))
        self.menubar.setObjectName("menubar")
        self.menu = QtWidgets.QMenu(self.menubar)
        self.menu.setObjectName("menu")
        self.menu_2 = QtWidgets.QMenu(self.menubar)
        self.menu_2.setObjectName("menu_2")
        self.menu_3 = QtWidgets.QMenu(self.menubar)
        self.menu_3.setObjectName("menu_3")
        self.menu_4 = QtWidgets.QMenu(self.menubar)
        self.menu_4.setObjectName("menu_4")
        self.menu_5 = QtWidgets.QMenu(self.menubar)
        self.menu_5.setObjectName("menu_5")
        self.menu_7 = QtWidgets.QMenu(self.menubar)
        self.menu_7.setObjectName("menu_7")
        self.menu_6 = QtWidgets.QMenu(self.menubar)
        self.menu_6.setObjectName("menu_6")
        self.menu_DFA = QtWidgets.QMenu(self.menubar)
        self.menu_DFA.setObjectName("menu_DFA")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.action_open_file = QtWidgets.QAction(MainWindow)
        font = QtGui.QFont()
        self.action_open_file.setFont(font)
        self.action_open_file.setObjectName("action_open_file")
        self.actionsave_file = QtWidgets.QAction(MainWindow)
        self.actionsave_file.setObjectName("actionsave_file")
        self.actionhelp = QtWidgets.QAction(MainWindow)
        self.actionhelp.setObjectName("actionhelp")
        self.action_about_compleier = QtWidgets.QAction(MainWindow)
        self.action_about_compleier.setObjectName("action_about_compleier")
        self.actionstart_analyse = QtWidgets.QAction(MainWindow)
        self.actionstart_analyse.setObjectName("actionstart_analyse")
        self.actionsave_another_file = QtWidgets.QAction(MainWindow)
        self.actionsave_another_file.setObjectName("actionsave_another_file")
        self.actionlex_analyse = QtWidgets.QAction(MainWindow)
        self.actionlex_analyse.setObjectName("actionlex_analyse")
        self.actionstart = QtWidgets.QAction(MainWindow)
        self.actionstart.setObjectName("actionstart")
        self.actiondigui_analyse = QtWidgets.QAction(MainWindow)
        self.actiondigui_analyse.setObjectName("actiondigui_analyse")
        self.action_Lr0_analyse = QtWidgets.QAction(MainWindow)
        self.action_Lr0_analyse.setObjectName("action_Lr0_analyse")
        self.action_creat_code = QtWidgets.QAction(MainWindow)
        self.action_creat_code.setObjectName("action_creat_code")
        self.action_creat_targetcode = QtWidgets.QAction(MainWindow)
        self.action_creat_targetcode.setObjectName("action_creat_targetcode")
        self.actionze_nfa = QtWidgets.QAction(MainWindow)
        self.actionze_nfa.setObjectName("actionze_nfa")
        self.menu.addAction(self.action_open_file)
        self.menu.addAction(self.actionsave_file)
        self.menu.addAction(self.actionsave_another_file)
        self.menu_3.addAction(self.actionstart_analyse)
        self.menu_3.addAction(self.actionlex_analyse)
        self.menu_4.addAction(self.action_creat_code)
        self.menu_5.addAction(self.action_creat_targetcode)
        self.menu_7.addAction(self.actionhelp)
        self.menu_7.addAction(self.action_about_compleier)
        self.menu_6.addAction(self.actionstart)
        self.menu_6.addAction(self.actiondigui_analyse)
        self.menu_6.addAction(self.action_Lr0_analyse)
        self.menu_DFA.addAction(self.actionze_nfa)
        self.menubar.addAction(self.menu.menuAction())
        self.menubar.addAction(self.menu_2.menuAction())
        self.menubar.addAction(self.menu_3.menuAction())
        self.menubar.addAction(self.menu_DFA.menuAction())
        self.menubar.addAction(self.menu_6.menuAction())
        self.menubar.addAction(self.menu_4.menuAction())
        self.menubar.addAction(self.menu_5.menuAction())
        self.menubar.addAction(self.menu_7.menuAction())

        # -----------------------------------
        self.textEdit.verticalScrollBar().valueChanged.connect(self.init_label2)
        self.textEdit.verticalScrollBar().setSingleStep(30)
        self.textEdit.setLineWrapMode(QTextEdit.NoWrap)
        self.textEdit.setStyleSheet("font-size:30px;")
        self.label.setStyleSheet("font-size:15px;")
        self.label.setAlignment(Qt.AlignTop)
        self.textEdit.textChanged.connect(self.init_label)
        self.action_open_file.triggered.connect(self.open_file)
        self.actionsave_file.triggered.connect(self.save_)
        self.actionsave_another_file.triggered.connect(self.save_another_file)
        self.actionstart_analyse.triggered.connect(self.ci_analyse)
        self.actionlex_analyse.triggered.connect(self.auto_analy)
        self.actiondigui_analyse.triggered.connect(self.dig_ana)
        self.actionstart.triggered.connect(self.pre_ana)
        self.action_Lr0_analyse.triggered.connect(self.Lr0_ana)
        self.actionze_nfa.triggered.connect(self.trans_DFA)
        self.action_creat_code.triggered.connect(self.middle_code)
        self.action_creat_targetcode.triggered.connect(self.targetcode)
        # ----------------------------------

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "Tex"))
        self.menu.setTitle(_translate("MainWindow", "文件"))
        self.menu_2.setTitle(_translate("MainWindow", "编辑"))
        self.menu_3.setTitle(_translate("MainWindow", " 词法分析"))
        self.menu_4.setTitle(_translate("MainWindow", " 中间代码"))
        self.menu_5.setTitle(_translate("MainWindow", " 目标代码生成"))
        self.menu_7.setTitle(_translate("MainWindow", " 帮助"))
        self.menu_6.setTitle(_translate("MainWindow", "语法分析"))
        self.menu_DFA.setTitle(_translate("MainWindow", "正则式DFA转换"))
        self.action_open_file.setText(_translate("MainWindow", "打开文件 ctrl+o"))
        self.action_open_file.setShortcut(_translate("MainWindow", "Ctrl+O"))
        self.actionsave_file.setText(_translate("MainWindow", "保存文件   ctrl+s"))
        self.actionsave_file.setShortcut(_translate("MainWindow", "Ctrl+S"))
        self.actionhelp.setText(_translate("MainWindow", "help"))
        self.action_about_compleier.setText(_translate("MainWindow", " about compleier"))
        self.actionstart_analyse.setText(_translate("MainWindow", "状态转换图分析"))
        self.actionsave_another_file.setText(_translate("MainWindow", "另存为"))
        self.actionlex_analyse.setText(_translate("MainWindow", "自动分析"))
        self.actionstart.setText(_translate("MainWindow", "预测分析"))
        self.actiondigui_analyse.setText(_translate("MainWindow", "递归分析"))
        self.action_Lr0_analyse.setText(_translate("MainWindow", " Lr0分析"))
        self.action_creat_code.setText(_translate("MainWindow", "生成中间代码"))
        self.action_creat_targetcode.setText(_translate("MainWindow", " 生成目标代码"))
        self.actionze_nfa.setText(_translate("MainWindow", "正则转NFA、DFA、最小化"))
